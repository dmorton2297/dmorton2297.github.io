{"version":3,"sources":["components/menu/Menu.jsx","components/navigation/Navigation.jsx","components/home/Home.jsx","components/app-root/App.js","serviceWorker.js","index.js"],"names":["Menu","onClose","props","callBack","className","onClick","this","Component","Navigation","onMenuClose","e","document","getElementById","style","transition","left","history","push","onMenuClicked","id","to","withRouter","Home","App","Router","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UAIqBA,G,iNAEnBC,QAAU,WACR,EAAKC,MAAMC,SAAS,K,wEAGZ,IAAD,OACP,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,eAAd,QACA,yBAAKA,UAAU,SACf,4BAAQA,UAAU,eAAeC,QAASC,KAAKL,SAAS,uBAAGG,UAAU,gCAEvE,yBAAKA,UAAU,cACf,yBAAKA,UAAU,oBACb,6BACE,4BAAQA,UAAU,cAAcC,QAAS,kBAAM,EAAKH,MAAMC,SAAS,UAAnE,SAEF,6BACE,4BAAQC,UAAU,cAAcC,QAAS,kBAAM,EAAKH,MAAMC,SAAS,aAAnE,eAEF,6BACE,4BAAQC,UAAU,cAAcC,QAAS,kBAAM,EAAKH,MAAMC,SAAS,WAAnE,gB,GAvBsBI,cCC3BC,E,2MACLC,YAAc,SAACC,GACbC,SAASC,eAAe,QAAQC,MAAMC,WAAa,OACnDH,SAASC,eAAe,QAAQC,MAAME,KAAO,QACnC,KAANL,GACF,EAAKR,MAAMc,QAAQC,KAAnB,WAA4BP,K,EAIhCQ,cAAgB,WACdP,SAASC,eAAe,QAAQC,MAAMC,WAAa,OACnDH,SAASC,eAAe,QAAQC,MAAME,KAAO,G,wEAI7C,OACE,6BACE,yBAAKX,UAAU,YAAYe,GAAG,QAC5B,kBAAC,EAAD,CAAMhB,SAAUG,KAAKG,eAEvB,6BACE,yBAAKL,UAAU,iBACb,6BACE,yBAAKA,UAAU,YACb,yBAAKA,UAAU,2BACb,uBAAGA,UAAU,oBAAoBC,QAASC,KAAKY,iBAGjD,yBAAKd,UAAU,4BACb,gDAEF,yBAAKA,UAAU,SACf,yBAAKA,UAAU,2BACb,kBAAC,IAAD,CAAMA,UAAU,WAAWgB,GAAG,YAC5B,uBAAGhB,UAAU,qC,GAlCPG,aA8CXc,cAAWb,GCjDLc,E,iLAEjB,OACE,6BACE,mD,GAJ0Bf,aC6BnBgB,E,iLApBX,OACE,yBAAKnB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAYY,QAASQ,IAAOR,UAC5B,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,SAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,UAChB,0CAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,YAChB,6C,GAdMnB,aCIEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStB,SAASC,eAAe,SD2H3C,kBAAmBsB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.63fc95b8.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Menu.css'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class Menu extends Component {\r\n\r\n  onClose = () => {\r\n    this.props.callBack('');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"header\">\r\n          <h1 className=\"header-text\">Menu</h1>\r\n          <div className=\"fill\"></div>\r\n          <button className=\"close-button\" onClick={this.onClose}><i className=\"fas fa-window-close fa-3x\"></i></button>\r\n        </div>\r\n        <div className=\"seperator\"></div>\r\n        <div className=\"option-container\">\r\n          <div>\r\n            <button className=\"menu-option\" onClick={() => this.props.callBack('home')}>Home</button>\r\n          </div>\r\n          <div>\r\n            <button className=\"menu-option\" onClick={() => this.props.callBack('profile')}>My Profile</button>\r\n          </div>\r\n          <div>\r\n            <button className=\"menu-option\" onClick={() => this.props.callBack('about')}>About</button>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nMenu.propTypes = {\r\n  callBack: PropTypes.func.isRequired\r\n}\r\n","import React, { Component } from 'react'\r\nimport './Navigation.css'\r\nimport {withRouter, Link } from \"react-router-dom\";\r\nimport Menu from '../menu/Menu';\r\n\r\n class Navigation extends Component {\r\n  onMenuClose = (e) => {\r\n    document.getElementById('menu').style.transition = \"0.5s\";\r\n    document.getElementById('menu').style.left = \"-50vw\";\r\n    if (e !== '') {\r\n      this.props.history.push(`/${e}`);\r\n    }\r\n  }\r\n\r\n  onMenuClicked = () => {\r\n    document.getElementById('menu').style.transition = \"0.5s\";\r\n    document.getElementById('menu').style.left = 0;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"menu-view\" id=\"menu\">\r\n          <Menu callBack={this.onMenuClose} />\r\n        </div>\r\n        <div>\r\n          <div className=\"nav-container\">\r\n            <nav>\r\n              <div className=\"nav-flex\">\r\n                <div className=\"nav-link-container menu\">\r\n                  <i className=\"fas fa-bars fa-2x\" onClick={this.onMenuClicked}></i>\r\n                </div>\r\n\r\n                <div className=\"nav-link-container title\">\r\n                  <h3>Slide Menu Demo</h3>\r\n                </div>\r\n                <div className=\"fill\"></div>\r\n                <div className=\"nav-link-container user\">\r\n                  <Link className=\"nav-link\" to=\"/profile\">\r\n                    <i className=\"fas fa-user-alt fa-2x\"></i>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </nav>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(Navigation);","import React, { Component } from 'react'\r\n\r\nexport default class Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Home component</h2>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport Navigation from '../navigation/Navigation';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from '../home/Home';\n\n/*\n* Root of the application\n*/\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Navigation history={Router.history}/>\n          <Route exact path=\"/home\">\n            <Home />\n          </Route>\n          <Route exact path=\"/about\">\n            <p>About Page</p>\n          </Route>\n          <Route exact path=\"/profile\">\n            <p>Profile</p>\n          </Route>\n        </Router>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app-root/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}