{"version":3,"sources":["apollo/client/client.js","components/core/app-bar/app-bar.style.js","components/core/app-bar/app-bar.js","shapes/country.js","components/core/country-card/country-card.style.js","components/core/country-card/country-card.js","components/core/country-list/country-list.js","apollo/queries/countries-query.js","components/core/country-search-form/country-search-form.style.js","components/core/country-search-form/country-search-form.js","components/containers/home/home.styles.js","components/containers/home/home.js","components/containers/app/app.js","index.js"],"names":["GqlClient","ApolloClient","uri","cache","InMemoryCache","AppBarContainer","styled","div","AppBar","title","Country","shape","name","string","capital","currency","emoji","languages","arrayOf","code","CountryCardContainer","Emoji","h1","Text","p","CountryCard","country","CountryList","countryData","map","i","propsTypes","defaultProps","COUNTRIES_QUERY","gql","FormContainer","TextInput","Field","CountrySearchForm","onSubmit","currentValues","handleSubmit","values","payload","eq","undefined","regex","continent","initialValues","setSubmitting","isSubmitting","placeholder","type","disabled","MainContainer","Home","useState","queryParams","setQueryParams","setCurrentValues","useQuery","variables","filter","loading","error","data","countries","App","client","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7132323c.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst GqlClient = new ApolloClient({\n    uri: 'https://countries.trevorblades.com',\n    cache: new InMemoryCache()\n});\n\nexport default GqlClient;","import styled from 'styled-components';\n\nexport const AppBarContainer = styled.div`\n    height: 80px;\n    background-color: lightgray;\n    display: grid;\n    justify-content: center;\n    align-content: center;\n`;","import React from 'react'\nimport { AppBarContainer } from './app-bar.style';\n\n/**\n * \n * @param {object} params - Object containing props\n * @param {string} params.title - Title to display\n */\nconst AppBar = ({ title }) => {\n    return (\n        <AppBarContainer>\n            <h3>{title}</h3>\n        </AppBarContainer>\n    )\n}\n\nexport default AppBar;\n\n","import { shape, string, arrayOf } from 'prop-types';\n\nconst Country = shape({\n    name: string,\n    capital: string,\n    currency: string,\n    emoji: string,\n    languages: arrayOf(shape({\n        code: string,\n        name: string\n    })),\n});\n\nexport default Country;","import styled from 'styled-components';\n\nexport const CountryCardContainer = styled.div`\n    padding: 20px;\n    margin-top: 5px;\n    height: 50px;\n    background-color: lightgray;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    align-items: center;\n`;\n\nexport const Emoji = styled.h1`\n    margin: 0;\n`;\n\nexport const Text = styled.p`\n    margin: 0;\n    font-size: 20px;\n`;","import React from 'react'\n\nimport Country from '../../../shapes/country';\nimport { CountryCardContainer, Emoji, Text } from './country-card.style';\n\nconst CountryCard = ({ country }) => {\n    return (\n        <CountryCardContainer>\n            <Text>{country.name}</Text>\n            <Text>Capital: {country.capital}</Text>\n            <Text>Code: {country.code}</Text>\n            <Emoji>{country.emoji}</Emoji>\n        </CountryCardContainer>\n    );\n};\n\nCountryCard.propTypes = {\n    country: Country.isRequired,\n}\n\nexport default CountryCard;\n","import React from 'react';\nimport { arrayOf } from 'prop-types';\n\nimport Country from '../../../shapes/country';\nimport CountryCard from '../country-card';\n\n/**\n * Displays a list of countries\n * @param {object} params - Object containing props for this component\n * @param {object[]} params.countryData - List of countries\n */\nconst CountryList = ({ countryData }) => {\n    return countryData.map((country, i) => <CountryCard country={country} key={i} />)\n};\n\nCountryList.propsTypes = {\n    countryData: arrayOf(Country),\n}\n\nCountryList.defaultProps = {\n    countryData: [],\n};\n\nexport default CountryList\n","import { gql } from '@apollo/client';\n\nexport const COUNTRIES_QUERY = gql`\n    query countries($filter: CountryFilterInput) {\n        countries(filter: $filter) {\n        code\n        name\n        native\n        capital\n        emoji\n        currency\n        languages {\n            code\n            name\n        }\n    }\n}\n`;\n\nexport default COUNTRIES_QUERY;","import styled from 'styled-components';\nimport { Field } from 'formik';\n\n\nexport const FormContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n`;\n\nexport const TextInput = styled(Field)`\n    height: 50px;\n`;\n","import React from 'react';\nimport { Form, Formik } from 'formik';\nimport { func, object } from 'prop-types';\nimport { FormContainer, TextInput } from './country-search-form.style';\n\n/**\n * The country search form\n * @param {object} params - Object containing props\n * @param {function} params.onSubmit - Function handler to submit the form\n * @param {object} params.currentValues - State holding the current values for this form\n */\nconst CountrySearchForm = ({ onSubmit, currentValues }) => {\n\n    /**\n     * Handles submitting the form\n     */\n    const handleSubmit = (values) => {\n        const payload = {\n            code: values.code ? {\n                eq: values.code,\n            } : undefined,\n            currency: values.currency ? {\n                regex: values.currency || '',\n            } : undefined,\n            continent: values.continent ? {\n                eq: values.continent || '',\n            } : undefined,\n        }\n        onSubmit(values, payload);\n    }\n\n    return (\n        <Formik\n            initialValues={currentValues ? currentValues : {\n                code: '',\n                currency: '',\n                continent: ''\n            }}\n            onSubmit={(values, { setSubmitting }) => {\n                setSubmitting(false);\n                handleSubmit(values);\n            }}>\n            {({ isSubmitting }) => (\n                <Form>\n                    <FormContainer>\n                        <TextInput placeholder=\"COUNTRY CODE\" type=\"text\" name=\"code\" />\n                        <TextInput placeholder=\"CURRENCY CODE\" type=\"text\" name=\"currency\" />\n                        <TextInput placeholder=\"CONTINENT CODE\" type=\"text\" name=\"continent\" />\n                        <button type=\"submit\" disabled={isSubmitting}>\n                            Submit\n                        </button>\n                    </FormContainer>\n\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\nCountrySearchForm.propTypes = {\n    onSubmit: func,\n    currentValues: object,\n};\n\nCountrySearchForm.defaultProps = {\n    onSubmit: () => { },\n    currentValues: {}\n};\n\nexport default CountrySearchForm;\n","import styled from 'styled-components';\n\nexport const MainContainer = styled.div`\n    padding: 20px;\n`;","import { useQuery } from '@apollo/client';\nimport React, { useState } from 'react'\n\nimport CountryList from '../../core/country-list';\nimport COUNTRIES_QUERY from '../../../apollo/queries';\nimport CountrySearchForm from '../../core/country-search-form';\nimport { MainContainer } from './home.styles';\n\n/**\n * Home component of the application\n * @return {element} - The home component\n */\nconst Home = () => {\n    // State Hooks\n    const [queryParams, setQueryParams] = useState(null);\n    const [currentValues, setCurrentValues] = useState(null);\n\n    // Apollo hook\n    const { loading, error, data } = useQuery(COUNTRIES_QUERY, {\n        variables: queryParams ? {\n            filter: queryParams\n        } : {},\n    });\n\n    /**\n     * Handles submitting the country search form\n     * @param {object} values - Values submitted from form\n     * @param {*} queryParams - Query parameters to feed query\n     * @return {void}\n     */\n    const submitCountrySearchForm = (values, queryParams) => {\n        setQueryParams(queryParams);\n        setCurrentValues(values);\n    }\n\n    // If loading\n    if (loading) {\n        return <p>Loading</p>;\n    }\n\n    // If error\n    if (error) {\n        return <p>Unexpected error</p>\n    }\n\n    // Render\n    return (\n        <MainContainer>\n            <CountrySearchForm\n                currentValues={currentValues}\n                onSubmit={submitCountrySearchForm}\n            />\n            <CountryList countryData={data?.countries} />\n        </MainContainer>\n    );\n};\n\nexport default Home;\n","\nimport { ApolloProvider } from '@apollo/client';\nimport React from 'react';\nimport GqlClient from '../../../apollo/client';\nimport AppBar from '../../core/app-bar';\nimport Home from '../home';\n\nconst App = () => {\n  return (\n    <ApolloProvider client={GqlClient}>\n      <div className=\"App\">\n        <AppBar title=\"ApolloClient Refrence - Country Search\" />\n        <Home />\n      </div>\n    </ApolloProvider>\n\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/containers/app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}